- Redux
- React-Redux
- Redux-Thunk
- Redux-Toolkit
- RTK Query
- Redux Saga

-> Create a React app using vite: npm create vite@latest my-app -- --template react

-> Redux
- A pattern
- A Library
- Independent of Frameworks
- State management in JS
- Avoids prop drilling
- Global store: access can be from anywhere
- change state from anywhere, using actions

-> When to use Redux?
- Big Applications
- High frequency of state changes

-> Redux pattern

- Terms: Store, State, Action, Action creators, Side effects, Middlewares 
- Action: a plain JS object, (Type + Payload), ex: { type: "FETCH_USER", paylaod: { userId: "32da13a9f7"} }
- Action doesn't directly change state
- Reducer: changes state, not directly
- Reducer: a pure function, no side effects
- Reducer takes two things: state and action, and returns new state
- Dispatch: function which dispatches action
- Store: state + reducer + dispatch
- Action creator: function which returns an action(object)
- dispatch runs immediately, doesn't wait
- Middlewares are used for handling side effects
- Side effects: API calls, storing or retrieving cache(localStorage), setting timers, etc.

-> Best practices:
- Make action name constants and assign variable to them

-> Principles of Redux:
1. Global State: single source of truth
2. Immutable updates: state read-only
3. Reducer should be pure: no side effects

-> Immutability:
- Don't change state directly, return a new object from reducer
- If we are keeping a track of old state, then old state(s) will also be changed if we directly change the state 

-> React-Redux
- React doesn't know about redux variables
- React only updates UI when we change state variable(made with useState hook)
- Linking state of react with redux is the primary use of react-redux
- Wrap top level App component in <Provider> from 'react-redux'
- useSelector: A hook to access redux store's state 
- useDispatch : A hook to access redux store's dispatch

-> Redux Toolkit
- configureStore to setup store 
- We make slices(by createSlice)
- createSlice takes three params: name, initialState and reducers
- We can export action creators(same name as reducers) and whole reducer from the slice
- react-redux doesn't come along redux toolkit, we have to install it separately

-> Middlewares:
- Handles side effects like API calls, access browser's localStorage, Generate random numbers
- common middlewares: redux-thunk, redux-saga 

-> Redux-Saga ðŸ’»
- A middleware library
- Side effects easier to manage, keep side effects out from reducers
- Easier to execute, test and handle failures
- Saga is like a separate thread in your application that's solely responsible for side effects. 
- redux-saga is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal redux actions
- A saga has access to the full redux application state, it can make API calls, dispatch redux actions, call another saga, access cache.
- Difference from redux-thunk: No callback hell, actions stay pure, easier to test asynchronous flows

1. Sagas:
- Sagas are generator functions.
- They listen for dispatched actions and execute side effects in response.
- They can dispatch actions, call APIs, call another saga and perform other asynchronous tasks.

2. Generator Functions:
- Generator functions are defined using the function* syntax.
- They can be paused and resumed using the yield keyword.
- This allows you to write asynchronous code that looks synchronous.

3. Effects:
- Effects are plain JavaScript objects that instruct the Redux Saga middleware to perform certain tasks.
- Redux Saga provides a set of built-in effects, such as take, put, call, and fork
- call(fn, ...args):
- put(action): dispatches action
- take(pattern): listens for actions matching the pattern and yields the action
- takeLatest(pattern, saga, ...args): ensures that only the most recent request is processed, canceling any previous ones.
- takeEvery(pattern, saga, ...args): every request is processed, and doesn't cancel previous requests
- Here pattern is action constant(string)

* The 'yield' keyword pauses the saga until the promise returned by fetchUserData resolves

-> Things to learn:
- json-server module
- redxu-thunk
- reducer function to be used in thunk
- three actions: pending, success and failed 


